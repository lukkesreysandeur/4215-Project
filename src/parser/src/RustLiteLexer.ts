// Generated from src/RustLite.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class RustLiteLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly T__17 = 18;
    public static readonly T__18 = 19;
    public static readonly T__19 = 20;
    public static readonly T__20 = 21;
    public static readonly T__21 = 22;
    public static readonly T__22 = 23;
    public static readonly T__23 = 24;
    public static readonly T__24 = 25;
    public static readonly T__25 = 26;
    public static readonly T__26 = 27;
    public static readonly T__27 = 28;
    public static readonly T__28 = 29;
    public static readonly T__29 = 30;
    public static readonly T__30 = 31;
    public static readonly T__31 = 32;
    public static readonly T__32 = 33;
    public static readonly T__33 = 34;
    public static readonly INT = 35;
    public static readonly BOOL = 36;
    public static readonly IDENTIFIER = 37;
    public static readonly U8_TYPE = 38;
    public static readonly U16_TYPE = 39;
    public static readonly U32_TYPE = 40;
    public static readonly U64_TYPE = 41;
    public static readonly I8_TYPE = 42;
    public static readonly I16_TYPE = 43;
    public static readonly I32_TYPE = 44;
    public static readonly I64_TYPE = 45;
    public static readonly BOOL_TYPE = 46;
    public static readonly WS = 47;
    public static readonly COMMENT = 48;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'('", "')'", "'-'", "'*'", "'/'", "'%'", "'+'", "'>'", "'<'", 
        "'=='", "'!='", "'<='", "'>='", "'!'", "'&&'", "'||'", "'{'", "'}'", 
        "';'", "'let'", "':'", "'='", "'const'", "'mut'", "'if'", "'else'", 
        "'while'", "'break'", "'continue'", "','", "'()'", "'->'", "'return'", 
        "'fn'", null, null, null, "'u8'", "'u16'", "'u32'", "'u64'", "'i8'", 
        "'i16'", "'i32'", "'i64'", "'bool'"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, "INT", "BOOL", "IDENTIFIER", "U8_TYPE", "U16_TYPE", 
        "U32_TYPE", "U64_TYPE", "I8_TYPE", "I16_TYPE", "I32_TYPE", "I64_TYPE", 
        "BOOL_TYPE", "WS", "COMMENT"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", 
        "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", 
        "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", 
        "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
        "T__32", "T__33", "INT", "BOOL", "IDENTIFIER", "U8_TYPE", "U16_TYPE", 
        "U32_TYPE", "U64_TYPE", "I8_TYPE", "I16_TYPE", "I32_TYPE", "I64_TYPE", 
        "BOOL_TYPE", "WS", "COMMENT",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, RustLiteLexer._ATN, RustLiteLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "RustLite.g4"; }

    public get literalNames(): (string | null)[] { return RustLiteLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return RustLiteLexer.symbolicNames; }
    public get ruleNames(): string[] { return RustLiteLexer.ruleNames; }

    public get serializedATN(): number[] { return RustLiteLexer._serializedATN; }

    public get channelNames(): string[] { return RustLiteLexer.channelNames; }

    public get modeNames(): string[] { return RustLiteLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,48,282,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,
        11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,
        27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,33,1,33,1,33,1,34,4,34,208,8,34,11,34,12,34,209,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,221,8,35,1,36,1,
        36,5,36,225,8,36,10,36,12,36,228,9,36,1,37,1,37,1,37,1,38,1,38,1,
        38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,
        42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,
        45,1,45,1,45,1,45,1,46,4,46,266,8,46,11,46,12,46,267,1,46,1,46,1,
        47,1,47,1,47,1,47,5,47,276,8,47,10,47,12,47,279,9,47,1,47,1,47,0,
        0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,286,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,99,1,0,0,0,5,101,1,
        0,0,0,7,103,1,0,0,0,9,105,1,0,0,0,11,107,1,0,0,0,13,109,1,0,0,0,
        15,111,1,0,0,0,17,113,1,0,0,0,19,115,1,0,0,0,21,118,1,0,0,0,23,121,
        1,0,0,0,25,124,1,0,0,0,27,127,1,0,0,0,29,129,1,0,0,0,31,132,1,0,
        0,0,33,135,1,0,0,0,35,137,1,0,0,0,37,139,1,0,0,0,39,141,1,0,0,0,
        41,145,1,0,0,0,43,147,1,0,0,0,45,149,1,0,0,0,47,155,1,0,0,0,49,159,
        1,0,0,0,51,162,1,0,0,0,53,167,1,0,0,0,55,173,1,0,0,0,57,179,1,0,
        0,0,59,188,1,0,0,0,61,190,1,0,0,0,63,193,1,0,0,0,65,196,1,0,0,0,
        67,203,1,0,0,0,69,207,1,0,0,0,71,220,1,0,0,0,73,222,1,0,0,0,75,229,
        1,0,0,0,77,232,1,0,0,0,79,236,1,0,0,0,81,240,1,0,0,0,83,244,1,0,
        0,0,85,247,1,0,0,0,87,251,1,0,0,0,89,255,1,0,0,0,91,259,1,0,0,0,
        93,265,1,0,0,0,95,271,1,0,0,0,97,98,5,40,0,0,98,2,1,0,0,0,99,100,
        5,41,0,0,100,4,1,0,0,0,101,102,5,45,0,0,102,6,1,0,0,0,103,104,5,
        42,0,0,104,8,1,0,0,0,105,106,5,47,0,0,106,10,1,0,0,0,107,108,5,37,
        0,0,108,12,1,0,0,0,109,110,5,43,0,0,110,14,1,0,0,0,111,112,5,62,
        0,0,112,16,1,0,0,0,113,114,5,60,0,0,114,18,1,0,0,0,115,116,5,61,
        0,0,116,117,5,61,0,0,117,20,1,0,0,0,118,119,5,33,0,0,119,120,5,61,
        0,0,120,22,1,0,0,0,121,122,5,60,0,0,122,123,5,61,0,0,123,24,1,0,
        0,0,124,125,5,62,0,0,125,126,5,61,0,0,126,26,1,0,0,0,127,128,5,33,
        0,0,128,28,1,0,0,0,129,130,5,38,0,0,130,131,5,38,0,0,131,30,1,0,
        0,0,132,133,5,124,0,0,133,134,5,124,0,0,134,32,1,0,0,0,135,136,5,
        123,0,0,136,34,1,0,0,0,137,138,5,125,0,0,138,36,1,0,0,0,139,140,
        5,59,0,0,140,38,1,0,0,0,141,142,5,108,0,0,142,143,5,101,0,0,143,
        144,5,116,0,0,144,40,1,0,0,0,145,146,5,58,0,0,146,42,1,0,0,0,147,
        148,5,61,0,0,148,44,1,0,0,0,149,150,5,99,0,0,150,151,5,111,0,0,151,
        152,5,110,0,0,152,153,5,115,0,0,153,154,5,116,0,0,154,46,1,0,0,0,
        155,156,5,109,0,0,156,157,5,117,0,0,157,158,5,116,0,0,158,48,1,0,
        0,0,159,160,5,105,0,0,160,161,5,102,0,0,161,50,1,0,0,0,162,163,5,
        101,0,0,163,164,5,108,0,0,164,165,5,115,0,0,165,166,5,101,0,0,166,
        52,1,0,0,0,167,168,5,119,0,0,168,169,5,104,0,0,169,170,5,105,0,0,
        170,171,5,108,0,0,171,172,5,101,0,0,172,54,1,0,0,0,173,174,5,98,
        0,0,174,175,5,114,0,0,175,176,5,101,0,0,176,177,5,97,0,0,177,178,
        5,107,0,0,178,56,1,0,0,0,179,180,5,99,0,0,180,181,5,111,0,0,181,
        182,5,110,0,0,182,183,5,116,0,0,183,184,5,105,0,0,184,185,5,110,
        0,0,185,186,5,117,0,0,186,187,5,101,0,0,187,58,1,0,0,0,188,189,5,
        44,0,0,189,60,1,0,0,0,190,191,5,40,0,0,191,192,5,41,0,0,192,62,1,
        0,0,0,193,194,5,45,0,0,194,195,5,62,0,0,195,64,1,0,0,0,196,197,5,
        114,0,0,197,198,5,101,0,0,198,199,5,116,0,0,199,200,5,117,0,0,200,
        201,5,114,0,0,201,202,5,110,0,0,202,66,1,0,0,0,203,204,5,102,0,0,
        204,205,5,110,0,0,205,68,1,0,0,0,206,208,7,0,0,0,207,206,1,0,0,0,
        208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,70,1,0,0,0,211,
        212,5,116,0,0,212,213,5,114,0,0,213,214,5,117,0,0,214,221,5,101,
        0,0,215,216,5,102,0,0,216,217,5,97,0,0,217,218,5,108,0,0,218,219,
        5,115,0,0,219,221,5,101,0,0,220,211,1,0,0,0,220,215,1,0,0,0,221,
        72,1,0,0,0,222,226,7,1,0,0,223,225,7,2,0,0,224,223,1,0,0,0,225,228,
        1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,74,1,0,0,0,228,226,1,
        0,0,0,229,230,5,117,0,0,230,231,5,56,0,0,231,76,1,0,0,0,232,233,
        5,117,0,0,233,234,5,49,0,0,234,235,5,54,0,0,235,78,1,0,0,0,236,237,
        5,117,0,0,237,238,5,51,0,0,238,239,5,50,0,0,239,80,1,0,0,0,240,241,
        5,117,0,0,241,242,5,54,0,0,242,243,5,52,0,0,243,82,1,0,0,0,244,245,
        5,105,0,0,245,246,5,56,0,0,246,84,1,0,0,0,247,248,5,105,0,0,248,
        249,5,49,0,0,249,250,5,54,0,0,250,86,1,0,0,0,251,252,5,105,0,0,252,
        253,5,51,0,0,253,254,5,50,0,0,254,88,1,0,0,0,255,256,5,105,0,0,256,
        257,5,54,0,0,257,258,5,52,0,0,258,90,1,0,0,0,259,260,5,98,0,0,260,
        261,5,111,0,0,261,262,5,111,0,0,262,263,5,108,0,0,263,92,1,0,0,0,
        264,266,7,3,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,
        267,268,1,0,0,0,268,269,1,0,0,0,269,270,6,46,0,0,270,94,1,0,0,0,
        271,272,5,47,0,0,272,273,5,47,0,0,273,277,1,0,0,0,274,276,8,4,0,
        0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,
        0,278,280,1,0,0,0,279,277,1,0,0,0,280,281,6,47,0,0,281,96,1,0,0,
        0,6,0,209,220,226,267,277,1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!RustLiteLexer.__ATN) {
            RustLiteLexer.__ATN = new antlr.ATNDeserializer().deserialize(RustLiteLexer._serializedATN);
        }

        return RustLiteLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(RustLiteLexer.literalNames, RustLiteLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return RustLiteLexer.vocabulary;
    }

    private static readonly decisionsToDFA = RustLiteLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}